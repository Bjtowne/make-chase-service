org: bjtowne
app: make-chase
service: make-chase-service

frameworkVersion: '2'

custom:
  apiGatewayTags:
    thedeepdarkweb: 'serverless-auto'
  serverless-offline:
    noPrependStageInUrl: true
    printOutput: true
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  dynamodb:
    stages: api
    start:
      port: 8000
      migrate: true

package:
  include:
    - src/**

plugins:
  - serverless-plugin-tracing
  - serverless-tag-api-gateway
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  stage: api
  region: us-east-1
  tracing: true
  websocketsApiRouteSelectionExpression: $request.body.action
  tags:
    thedeepdarkweb: 'serverless-auto'
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["connectionsTable", "Arn" ] }
        - { "Fn::GetAtt": ["subscriptionsTable", "Arn" ] }
  environment:
    AWS_STAGE: ${self:provider.stage}
    SUBSCRIPTIONS_TABLE: subscriptions
    CONNECTIONS_TABLE: connections

functions:
  graphql:
    name: graphql
    handler: src/handlers/graphql.handler
    events:
      - http:
          path: graphql
          method: post
          cors: true
      - http:
          path: graphql
          method: get
          cors: true

  websocket:
      name: my-subscription-lambda
      handler: src/handlers/websocket.handler
      events:
        - websocket:
            route: $connect
        - websocket:
            route: $disconnect
        - websocket:
            route: $default

resources:
  Resources:
    # Table for tracking connections
    connectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    # Table for tracking subscriptions
    subscriptionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.SUBSCRIPTIONS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: topic
            AttributeType: S
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ConnectionIndex
            KeySchema:
              - AttributeName: connectionId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: TopicIndex
            KeySchema:
              - AttributeName: topic
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1